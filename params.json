{"name":"Base-structure","tagline":"website base structure","body":"base-structure\r\n================================\r\n\r\nThis is a frontend boilerplate to start a web project, using sass, requirejs, mootools classes and grunt.\r\n\r\n### What you need to install\r\n  - nodejs\r\n  -  -> grunt\r\n  -  -> bower (on windows you'll need to install git)\r\n\r\n### How to start\r\n\r\ngo to the project folder ( {project folder}/app ) and then run these commands:\r\n\r\n    npm install\r\n\r\n    bower install\r\n\r\n    grunt\r\n\r\n\r\n\r\ngrunt\r\n-------------------------\r\n### using grunt to:\r\n  - compile sass files\r\n  - minify css\r\n  - jshint\r\n  - auto prefix css3\r\n  - watch js/css files and recompile on the fly\r\n\r\n\r\n### how to use grunt:\r\n\r\n#### move to your app folder\r\n\r\n    cd path/to/project/folder\r\n\r\n#### install dependencies\r\n\r\n    npm install {package name} --save-dev\r\n\r\n#### add the new package in Gruntfile.js\r\n\r\n#### run grunt\r\n\r\n    grunt\r\n\r\n\r\n### more info on grunt:\r\n  - http://gruntjs.com/getting-started\r\n\r\n\r\n\r\nbower\r\n-------------------------\r\n### using bower to install js plugins/dependencies\r\n\r\n    bower install [plugin name]\r\n\r\n\r\n\r\nJS\r\n-------------------------\r\nrequirejs is used to add dependencies.\r\nboot.js add the requirejs configuration and the call the app.\r\napp.js load js files needed to run the app, and allow to load the right view and module files\r\n\r\nusing data-view=\"ViewName\" in the html will load the right js (js/src/views/View[ViewName].js)\r\n\r\nevery views will extend View.js\r\n\r\nyou can do the same thing with the modules ( data-module=\"ModuleName\" ) ... it will extend Module.js\r\n\r\nyou can create modules and then call them in a view this way:\r\n\r\n    var ModuleTest = new $.ModuleTest();\r\n\r\ndon't forget to add the dependency in the define at the top of the file.\r\n\r\n*warning: use\r\n\r\n    self.el.find('.class')\r\n\r\ninstead of\r\n\r\n    $('.class')\r\n\r\n\r\n\r\n\r\n### difference between a view and a module:\r\n\r\nA view is basically a page (home.html will be ViewHome.js ... products.html will be ViewProducts.js)\r\nA module will be inside a view. The same module can be shared between many views. A module can be present more than once in the same view too.\r\nPlus, you can instantiate a module on the page load (same as a view), or call it only when some stuff happens ( var ModuleTest = new $.ModuleTest(); )\r\n\r\n\r\n\r\nSASS\r\n-------------------------\r\n\r\nThe only file added in the html is /app/assets/css/dest/main.css\r\n\r\nEvery time you add a new scss file, you should add it to the main.scss\r\n\r\nEvery file is concatened, minified, and all prefix are added with grunt. This way, no need to add -webkit, -moz, -o etc. Grunt will take care of it.\r\n\r\nThe same structure as the js files apply. One folder for the views, and one folder for the modules.\r\nTo be consistent, you should isolate every views with\r\n\r\n    [data-view=\"ViewName\"] { }\r\n\r\nand every module with\r\n\r\n\t[data-module=\"ModuleName\"] { }\r\n\r\nto avoid conflicts.\r\n\r\nvariables and mixin should go in helpers/vars.scss\r\n\r\n\r\n\r\nResponsive\r\n-------------------------\r\n\r\n- optimize images for mobile vs desktop\r\n- calc mixin\r\n- css breakpoints / js breakpoint (window.deviceType)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}